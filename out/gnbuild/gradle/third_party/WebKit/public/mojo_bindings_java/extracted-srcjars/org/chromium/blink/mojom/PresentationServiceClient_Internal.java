
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/WebKit/public/platform/modules/presentation/presentation.mojom
//

package org.chromium.blink.mojom;

import org.chromium.base.annotations.SuppressFBWarnings;
import org.chromium.mojo.bindings.DeserializationException;


class PresentationServiceClient_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<PresentationServiceClient, PresentationServiceClient.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<PresentationServiceClient, PresentationServiceClient.Proxy>() {
    
        public String getName() {
            return "blink::mojom::PresentationServiceClient";
        }
    
        public int getVersion() {
          return 0;
        }
    
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }
    
        public Stub buildStub(org.chromium.mojo.system.Core core, PresentationServiceClient impl) {
            return new Stub(core, impl);
        }
    
        public PresentationServiceClient[] buildArray(int size) {
          return new PresentationServiceClient[size];
        }
    };


    private static final int ON_SCREEN_AVAILABILITY_NOT_SUPPORTED_ORDINAL = 0;

    private static final int ON_SCREEN_AVAILABILITY_UPDATED_ORDINAL = 1;

    private static final int ON_DEFAULT_SESSION_STARTED_ORDINAL = 2;

    private static final int ON_CONNECTION_STATE_CHANGED_ORDINAL = 3;

    private static final int ON_CONNECTION_CLOSED_ORDINAL = 4;

    private static final int ON_CONNECTION_MESSAGES_RECEIVED_ORDINAL = 5;

    private static final int ON_RECEIVER_CONNECTION_AVAILABLE_ORDINAL = 6;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements PresentationServiceClient.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onScreenAvailabilityNotSupported(
org.chromium.url.mojom.Url url) {

            PresentationServiceClientOnScreenAvailabilityNotSupportedParams _message = new PresentationServiceClientOnScreenAvailabilityNotSupportedParams();

            _message.url = url;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_SCREEN_AVAILABILITY_NOT_SUPPORTED_ORDINAL)));

        }


        @Override
        public void onScreenAvailabilityUpdated(
org.chromium.url.mojom.Url url, boolean available) {

            PresentationServiceClientOnScreenAvailabilityUpdatedParams _message = new PresentationServiceClientOnScreenAvailabilityUpdatedParams();

            _message.url = url;

            _message.available = available;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_SCREEN_AVAILABILITY_UPDATED_ORDINAL)));

        }


        @Override
        public void onDefaultSessionStarted(
PresentationSessionInfo sessionInfo) {

            PresentationServiceClientOnDefaultSessionStartedParams _message = new PresentationServiceClientOnDefaultSessionStartedParams();

            _message.sessionInfo = sessionInfo;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_DEFAULT_SESSION_STARTED_ORDINAL)));

        }


        @Override
        public void onConnectionStateChanged(
PresentationSessionInfo connection, int newState) {

            PresentationServiceClientOnConnectionStateChangedParams _message = new PresentationServiceClientOnConnectionStateChangedParams();

            _message.connection = connection;

            _message.newState = newState;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_CONNECTION_STATE_CHANGED_ORDINAL)));

        }


        @Override
        public void onConnectionClosed(
PresentationSessionInfo connection, int reason, String message) {

            PresentationServiceClientOnConnectionClosedParams _message = new PresentationServiceClientOnConnectionClosedParams();

            _message.connection = connection;

            _message.reason = reason;

            _message.message = message;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_CONNECTION_CLOSED_ORDINAL)));

        }


        @Override
        public void onConnectionMessagesReceived(
PresentationSessionInfo sessionInfo, ConnectionMessage[] messages) {

            PresentationServiceClientOnConnectionMessagesReceivedParams _message = new PresentationServiceClientOnConnectionMessagesReceivedParams();

            _message.sessionInfo = sessionInfo;

            _message.messages = messages;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_CONNECTION_MESSAGES_RECEIVED_ORDINAL)));

        }


        @Override
        public void onReceiverConnectionAvailable(
PresentationSessionInfo sessionInfo, PresentationConnection controllerConnectionPtr, org.chromium.mojo.bindings.InterfaceRequest<PresentationConnection> receiverConnectionRequest) {

            PresentationServiceClientOnReceiverConnectionAvailableParams _message = new PresentationServiceClientOnReceiverConnectionAvailableParams();

            _message.sessionInfo = sessionInfo;

            _message.controllerConnectionPtr = controllerConnectionPtr;

            _message.receiverConnectionRequest = receiverConnectionRequest;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_RECEIVER_CONNECTION_AVAILABLE_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<PresentationServiceClient> {

        Stub(org.chromium.mojo.system.Core core, PresentationServiceClient impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                PresentationServiceClient_Internal.MANAGER, messageWithHeader);
            
            
            
            
            
                    case ON_SCREEN_AVAILABILITY_NOT_SUPPORTED_ORDINAL: {
            
                        PresentationServiceClientOnScreenAvailabilityNotSupportedParams data =
                                PresentationServiceClientOnScreenAvailabilityNotSupportedParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onScreenAvailabilityNotSupported(data.url);
                        return true;
                    }
            
            
            
            
            
                    case ON_SCREEN_AVAILABILITY_UPDATED_ORDINAL: {
            
                        PresentationServiceClientOnScreenAvailabilityUpdatedParams data =
                                PresentationServiceClientOnScreenAvailabilityUpdatedParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onScreenAvailabilityUpdated(data.url, data.available);
                        return true;
                    }
            
            
            
            
            
                    case ON_DEFAULT_SESSION_STARTED_ORDINAL: {
            
                        PresentationServiceClientOnDefaultSessionStartedParams data =
                                PresentationServiceClientOnDefaultSessionStartedParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onDefaultSessionStarted(data.sessionInfo);
                        return true;
                    }
            
            
            
            
            
                    case ON_CONNECTION_STATE_CHANGED_ORDINAL: {
            
                        PresentationServiceClientOnConnectionStateChangedParams data =
                                PresentationServiceClientOnConnectionStateChangedParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onConnectionStateChanged(data.connection, data.newState);
                        return true;
                    }
            
            
            
            
            
                    case ON_CONNECTION_CLOSED_ORDINAL: {
            
                        PresentationServiceClientOnConnectionClosedParams data =
                                PresentationServiceClientOnConnectionClosedParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onConnectionClosed(data.connection, data.reason, data.message);
                        return true;
                    }
            
            
            
            
            
                    case ON_CONNECTION_MESSAGES_RECEIVED_ORDINAL: {
            
                        PresentationServiceClientOnConnectionMessagesReceivedParams data =
                                PresentationServiceClientOnConnectionMessagesReceivedParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onConnectionMessagesReceived(data.sessionInfo, data.messages);
                        return true;
                    }
            
            
            
            
            
                    case ON_RECEIVER_CONNECTION_AVAILABLE_ORDINAL: {
            
                        PresentationServiceClientOnReceiverConnectionAvailableParams data =
                                PresentationServiceClientOnReceiverConnectionAvailableParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onReceiverConnectionAvailable(data.sessionInfo, data.controllerConnectionPtr, data.receiverConnectionRequest);
                        return true;
                    }
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), PresentationServiceClient_Internal.MANAGER, messageWithHeader, receiver);
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class PresentationServiceClientOnScreenAvailabilityNotSupportedParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
    
        private PresentationServiceClientOnScreenAvailabilityNotSupportedParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceClientOnScreenAvailabilityNotSupportedParams() {
            this(0);
        }
    
        public static PresentationServiceClientOnScreenAvailabilityNotSupportedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceClientOnScreenAvailabilityNotSupportedParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceClientOnScreenAvailabilityNotSupportedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceClientOnScreenAvailabilityNotSupportedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceClientOnScreenAvailabilityNotSupportedParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(url, 8, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceClientOnScreenAvailabilityNotSupportedParams other = (PresentationServiceClientOnScreenAvailabilityNotSupportedParams) object;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.url, other.url);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(url);
            return result;
        }
    }



    
    static final class PresentationServiceClientOnScreenAvailabilityUpdatedParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public boolean available;
    
        private PresentationServiceClientOnScreenAvailabilityUpdatedParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceClientOnScreenAvailabilityUpdatedParams() {
            this(0);
        }
    
        public static PresentationServiceClientOnScreenAvailabilityUpdatedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceClientOnScreenAvailabilityUpdatedParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceClientOnScreenAvailabilityUpdatedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceClientOnScreenAvailabilityUpdatedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceClientOnScreenAvailabilityUpdatedParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.available = decoder0.readBoolean(16, 0);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(url, 8, false);
            
            encoder0.encode(available, 16, 0);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceClientOnScreenAvailabilityUpdatedParams other = (PresentationServiceClientOnScreenAvailabilityUpdatedParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.url, other.url))
                return false;
            return this.available == other.available;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(url);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(available);
            return result;
        }
    }



    
    static final class PresentationServiceClientOnDefaultSessionStartedParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PresentationSessionInfo sessionInfo;
    
        private PresentationServiceClientOnDefaultSessionStartedParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceClientOnDefaultSessionStartedParams() {
            this(0);
        }
    
        public static PresentationServiceClientOnDefaultSessionStartedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceClientOnDefaultSessionStartedParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceClientOnDefaultSessionStartedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceClientOnDefaultSessionStartedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceClientOnDefaultSessionStartedParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.sessionInfo = PresentationSessionInfo.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(sessionInfo, 8, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceClientOnDefaultSessionStartedParams other = (PresentationServiceClientOnDefaultSessionStartedParams) object;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.sessionInfo, other.sessionInfo);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sessionInfo);
            return result;
        }
    }



    
    static final class PresentationServiceClientOnConnectionStateChangedParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PresentationSessionInfo connection;
        public int newState;
    
        private PresentationServiceClientOnConnectionStateChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceClientOnConnectionStateChangedParams() {
            this(0);
        }
    
        public static PresentationServiceClientOnConnectionStateChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceClientOnConnectionStateChangedParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceClientOnConnectionStateChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceClientOnConnectionStateChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceClientOnConnectionStateChangedParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.connection = PresentationSessionInfo.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.newState = decoder0.readInt(16);
                        PresentationConnectionState.validate(result.newState);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(connection, 8, false);
            
            encoder0.encode(newState, 16);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceClientOnConnectionStateChangedParams other = (PresentationServiceClientOnConnectionStateChangedParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.connection, other.connection))
                return false;
            return this.newState == other.newState;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(connection);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(newState);
            return result;
        }
    }



    
    static final class PresentationServiceClientOnConnectionClosedParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PresentationSessionInfo connection;
        public int reason;
        public String message;
    
        private PresentationServiceClientOnConnectionClosedParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceClientOnConnectionClosedParams() {
            this(0);
        }
    
        public static PresentationServiceClientOnConnectionClosedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceClientOnConnectionClosedParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceClientOnConnectionClosedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceClientOnConnectionClosedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceClientOnConnectionClosedParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.connection = PresentationSessionInfo.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.reason = decoder0.readInt(16);
                        PresentationConnectionCloseReason.validate(result.reason);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.message = decoder0.readString(24, false);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(connection, 8, false);
            
            encoder0.encode(reason, 16);
            
            encoder0.encode(message, 24, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceClientOnConnectionClosedParams other = (PresentationServiceClientOnConnectionClosedParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.connection, other.connection))
                return false;
            if (this.reason!= other.reason)
                return false;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.message, other.message);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(connection);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(reason);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(message);
            return result;
        }
    }



    
    static final class PresentationServiceClientOnConnectionMessagesReceivedParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PresentationSessionInfo sessionInfo;
        public ConnectionMessage[] messages;
    
        private PresentationServiceClientOnConnectionMessagesReceivedParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceClientOnConnectionMessagesReceivedParams() {
            this(0);
        }
    
        public static PresentationServiceClientOnConnectionMessagesReceivedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceClientOnConnectionMessagesReceivedParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceClientOnConnectionMessagesReceivedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceClientOnConnectionMessagesReceivedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceClientOnConnectionMessagesReceivedParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.sessionInfo = PresentationSessionInfo.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.messages = new ConnectionMessage[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.messages[i1] = ConnectionMessage.decode(decoder2);
                        }
                    }
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(sessionInfo, 8, false);
            
            if (messages == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(messages.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < messages.length; ++i0) {
                    
                    encoder1.encode(messages[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceClientOnConnectionMessagesReceivedParams other = (PresentationServiceClientOnConnectionMessagesReceivedParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.sessionInfo, other.sessionInfo))
                return false;
            return java.util.Arrays.deepEquals(this.messages, other.messages);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sessionInfo);
            result = prime * result + java.util.Arrays.deepHashCode(messages);
            return result;
        }
    }



    
    static final class PresentationServiceClientOnReceiverConnectionAvailableParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PresentationSessionInfo sessionInfo;
        public PresentationConnection controllerConnectionPtr;
        public org.chromium.mojo.bindings.InterfaceRequest<PresentationConnection> receiverConnectionRequest;
    
        private PresentationServiceClientOnReceiverConnectionAvailableParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceClientOnReceiverConnectionAvailableParams() {
            this(0);
        }
    
        public static PresentationServiceClientOnReceiverConnectionAvailableParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceClientOnReceiverConnectionAvailableParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceClientOnReceiverConnectionAvailableParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceClientOnReceiverConnectionAvailableParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceClientOnReceiverConnectionAvailableParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.sessionInfo = PresentationSessionInfo.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.controllerConnectionPtr = decoder0.readServiceInterface(16, false, PresentationConnection.MANAGER);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.receiverConnectionRequest = decoder0.readInterfaceRequest(24, false);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(sessionInfo, 8, false);
            
            encoder0.encode(controllerConnectionPtr, 16, false, PresentationConnection.MANAGER);
            
            encoder0.encode(receiverConnectionRequest, 24, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceClientOnReceiverConnectionAvailableParams other = (PresentationServiceClientOnReceiverConnectionAvailableParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.sessionInfo, other.sessionInfo))
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.controllerConnectionPtr, other.controllerConnectionPtr))
                return false;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.receiverConnectionRequest, other.receiverConnectionRequest);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sessionInfo);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(controllerConnectionPtr);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(receiverConnectionRequest);
            return result;
        }
    }



}
