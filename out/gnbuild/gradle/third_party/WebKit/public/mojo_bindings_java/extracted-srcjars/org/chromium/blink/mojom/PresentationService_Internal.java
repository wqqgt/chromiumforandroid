
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/WebKit/public/platform/modules/presentation/presentation.mojom
//

package org.chromium.blink.mojom;

import org.chromium.base.annotations.SuppressFBWarnings;
import org.chromium.mojo.bindings.DeserializationException;


class PresentationService_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<PresentationService, PresentationService.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<PresentationService, PresentationService.Proxy>() {
    
        public String getName() {
            return "blink::mojom::PresentationService";
        }
    
        public int getVersion() {
          return 0;
        }
    
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }
    
        public Stub buildStub(org.chromium.mojo.system.Core core, PresentationService impl) {
            return new Stub(core, impl);
        }
    
        public PresentationService[] buildArray(int size) {
          return new PresentationService[size];
        }
    };


    private static final int SET_CLIENT_ORDINAL = 0;

    private static final int SET_DEFAULT_PRESENTATION_URLS_ORDINAL = 1;

    private static final int LISTEN_FOR_SCREEN_AVAILABILITY_ORDINAL = 2;

    private static final int STOP_LISTENING_FOR_SCREEN_AVAILABILITY_ORDINAL = 3;

    private static final int START_SESSION_ORDINAL = 4;

    private static final int JOIN_SESSION_ORDINAL = 5;

    private static final int SET_PRESENTATION_CONNECTION_ORDINAL = 6;

    private static final int SEND_CONNECTION_MESSAGE_ORDINAL = 7;

    private static final int CLOSE_CONNECTION_ORDINAL = 8;

    private static final int TERMINATE_ORDINAL = 9;

    private static final int LISTEN_FOR_CONNECTION_MESSAGES_ORDINAL = 10;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements PresentationService.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void setClient(
PresentationServiceClient client) {

            PresentationServiceSetClientParams _message = new PresentationServiceSetClientParams();

            _message.client = client;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_CLIENT_ORDINAL)));

        }


        @Override
        public void setDefaultPresentationUrls(
org.chromium.url.mojom.Url[] presentationUrls) {

            PresentationServiceSetDefaultPresentationUrlsParams _message = new PresentationServiceSetDefaultPresentationUrlsParams();

            _message.presentationUrls = presentationUrls;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_DEFAULT_PRESENTATION_URLS_ORDINAL)));

        }


        @Override
        public void listenForScreenAvailability(
org.chromium.url.mojom.Url availabilityUrl) {

            PresentationServiceListenForScreenAvailabilityParams _message = new PresentationServiceListenForScreenAvailabilityParams();

            _message.availabilityUrl = availabilityUrl;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(LISTEN_FOR_SCREEN_AVAILABILITY_ORDINAL)));

        }


        @Override
        public void stopListeningForScreenAvailability(
org.chromium.url.mojom.Url availabilityUrl) {

            PresentationServiceStopListeningForScreenAvailabilityParams _message = new PresentationServiceStopListeningForScreenAvailabilityParams();

            _message.availabilityUrl = availabilityUrl;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(STOP_LISTENING_FOR_SCREEN_AVAILABILITY_ORDINAL)));

        }


        @Override
        public void startSession(
org.chromium.url.mojom.Url[] presentationUrls, 
StartSessionResponse callback) {

            PresentationServiceStartSessionParams _message = new PresentationServiceStartSessionParams();

            _message.presentationUrls = presentationUrls;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    START_SESSION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new PresentationServiceStartSessionResponseParamsForwardToCallback(callback));

        }


        @Override
        public void joinSession(
org.chromium.url.mojom.Url[] presentationUrls, String presentationId, 
JoinSessionResponse callback) {

            PresentationServiceJoinSessionParams _message = new PresentationServiceJoinSessionParams();

            _message.presentationUrls = presentationUrls;

            _message.presentationId = presentationId;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    JOIN_SESSION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new PresentationServiceJoinSessionResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setPresentationConnection(
PresentationSessionInfo sessionInfo, PresentationConnection controllerConnectionPtr, org.chromium.mojo.bindings.InterfaceRequest<PresentationConnection> receiverConnectionRequest) {

            PresentationServiceSetPresentationConnectionParams _message = new PresentationServiceSetPresentationConnectionParams();

            _message.sessionInfo = sessionInfo;

            _message.controllerConnectionPtr = controllerConnectionPtr;

            _message.receiverConnectionRequest = receiverConnectionRequest;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_PRESENTATION_CONNECTION_ORDINAL)));

        }


        @Override
        public void sendConnectionMessage(
PresentationSessionInfo sessionInfo, ConnectionMessage messageRequest, 
SendConnectionMessageResponse callback) {

            PresentationServiceSendConnectionMessageParams _message = new PresentationServiceSendConnectionMessageParams();

            _message.sessionInfo = sessionInfo;

            _message.messageRequest = messageRequest;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SEND_CONNECTION_MESSAGE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new PresentationServiceSendConnectionMessageResponseParamsForwardToCallback(callback));

        }


        @Override
        public void closeConnection(
org.chromium.url.mojom.Url presentationUrl, String presentationId) {

            PresentationServiceCloseConnectionParams _message = new PresentationServiceCloseConnectionParams();

            _message.presentationUrl = presentationUrl;

            _message.presentationId = presentationId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CLOSE_CONNECTION_ORDINAL)));

        }


        @Override
        public void terminate(
org.chromium.url.mojom.Url presentationUrl, String presentationId) {

            PresentationServiceTerminateParams _message = new PresentationServiceTerminateParams();

            _message.presentationUrl = presentationUrl;

            _message.presentationId = presentationId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(TERMINATE_ORDINAL)));

        }


        @Override
        public void listenForConnectionMessages(
PresentationSessionInfo sessionInfo) {

            PresentationServiceListenForConnectionMessagesParams _message = new PresentationServiceListenForConnectionMessagesParams();

            _message.sessionInfo = sessionInfo;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(LISTEN_FOR_CONNECTION_MESSAGES_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<PresentationService> {

        Stub(org.chromium.mojo.system.Core core, PresentationService impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                PresentationService_Internal.MANAGER, messageWithHeader);
            
            
            
            
            
                    case SET_CLIENT_ORDINAL: {
            
                        PresentationServiceSetClientParams data =
                                PresentationServiceSetClientParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().setClient(data.client);
                        return true;
                    }
            
            
            
            
            
                    case SET_DEFAULT_PRESENTATION_URLS_ORDINAL: {
            
                        PresentationServiceSetDefaultPresentationUrlsParams data =
                                PresentationServiceSetDefaultPresentationUrlsParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().setDefaultPresentationUrls(data.presentationUrls);
                        return true;
                    }
            
            
            
            
            
                    case LISTEN_FOR_SCREEN_AVAILABILITY_ORDINAL: {
            
                        PresentationServiceListenForScreenAvailabilityParams data =
                                PresentationServiceListenForScreenAvailabilityParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().listenForScreenAvailability(data.availabilityUrl);
                        return true;
                    }
            
            
            
            
            
                    case STOP_LISTENING_FOR_SCREEN_AVAILABILITY_ORDINAL: {
            
                        PresentationServiceStopListeningForScreenAvailabilityParams data =
                                PresentationServiceStopListeningForScreenAvailabilityParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().stopListeningForScreenAvailability(data.availabilityUrl);
                        return true;
                    }
            
            
            
            
            
            
            
            
            
                    case SET_PRESENTATION_CONNECTION_ORDINAL: {
            
                        PresentationServiceSetPresentationConnectionParams data =
                                PresentationServiceSetPresentationConnectionParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().setPresentationConnection(data.sessionInfo, data.controllerConnectionPtr, data.receiverConnectionRequest);
                        return true;
                    }
            
            
            
            
            
            
            
                    case CLOSE_CONNECTION_ORDINAL: {
            
                        PresentationServiceCloseConnectionParams data =
                                PresentationServiceCloseConnectionParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().closeConnection(data.presentationUrl, data.presentationId);
                        return true;
                    }
            
            
            
            
            
                    case TERMINATE_ORDINAL: {
            
                        PresentationServiceTerminateParams data =
                                PresentationServiceTerminateParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().terminate(data.presentationUrl, data.presentationId);
                        return true;
                    }
            
            
            
            
            
                    case LISTEN_FOR_CONNECTION_MESSAGES_ORDINAL: {
            
                        PresentationServiceListenForConnectionMessagesParams data =
                                PresentationServiceListenForConnectionMessagesParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().listenForConnectionMessages(data.sessionInfo);
                        return true;
                    }
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), PresentationService_Internal.MANAGER, messageWithHeader, receiver);
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
                    case START_SESSION_ORDINAL: {
            
                        PresentationServiceStartSessionParams data =
                                PresentationServiceStartSessionParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().startSession(data.presentationUrls, new PresentationServiceStartSessionResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
            
            
            
                    case JOIN_SESSION_ORDINAL: {
            
                        PresentationServiceJoinSessionParams data =
                                PresentationServiceJoinSessionParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().joinSession(data.presentationUrls, data.presentationId, new PresentationServiceJoinSessionResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
            
            
            
            
            
                    case SEND_CONNECTION_MESSAGE_ORDINAL: {
            
                        PresentationServiceSendConnectionMessageParams data =
                                PresentationServiceSendConnectionMessageParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().sendConnectionMessage(data.sessionInfo, data.messageRequest, new PresentationServiceSendConnectionMessageResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
            
            
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class PresentationServiceSetClientParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PresentationServiceClient client;
    
        private PresentationServiceSetClientParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceSetClientParams() {
            this(0);
        }
    
        public static PresentationServiceSetClientParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceSetClientParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceSetClientParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceSetClientParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceSetClientParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.client = decoder0.readServiceInterface(8, false, PresentationServiceClient.MANAGER);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(client, 8, false, PresentationServiceClient.MANAGER);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceSetClientParams other = (PresentationServiceSetClientParams) object;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.client, other.client);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(client);
            return result;
        }
    }



    
    static final class PresentationServiceSetDefaultPresentationUrlsParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url[] presentationUrls;
    
        private PresentationServiceSetDefaultPresentationUrlsParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceSetDefaultPresentationUrlsParams() {
            this(0);
        }
    
        public static PresentationServiceSetDefaultPresentationUrlsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceSetDefaultPresentationUrlsParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceSetDefaultPresentationUrlsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceSetDefaultPresentationUrlsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceSetDefaultPresentationUrlsParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.presentationUrls = new org.chromium.url.mojom.Url[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.presentationUrls[i1] = org.chromium.url.mojom.Url.decode(decoder2);
                        }
                    }
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (presentationUrls == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(presentationUrls.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < presentationUrls.length; ++i0) {
                    
                    encoder1.encode(presentationUrls[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceSetDefaultPresentationUrlsParams other = (PresentationServiceSetDefaultPresentationUrlsParams) object;
            return java.util.Arrays.deepEquals(this.presentationUrls, other.presentationUrls);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + java.util.Arrays.deepHashCode(presentationUrls);
            return result;
        }
    }



    
    static final class PresentationServiceListenForScreenAvailabilityParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url availabilityUrl;
    
        private PresentationServiceListenForScreenAvailabilityParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceListenForScreenAvailabilityParams() {
            this(0);
        }
    
        public static PresentationServiceListenForScreenAvailabilityParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceListenForScreenAvailabilityParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceListenForScreenAvailabilityParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceListenForScreenAvailabilityParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceListenForScreenAvailabilityParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.availabilityUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(availabilityUrl, 8, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceListenForScreenAvailabilityParams other = (PresentationServiceListenForScreenAvailabilityParams) object;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.availabilityUrl, other.availabilityUrl);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(availabilityUrl);
            return result;
        }
    }



    
    static final class PresentationServiceStopListeningForScreenAvailabilityParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url availabilityUrl;
    
        private PresentationServiceStopListeningForScreenAvailabilityParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceStopListeningForScreenAvailabilityParams() {
            this(0);
        }
    
        public static PresentationServiceStopListeningForScreenAvailabilityParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceStopListeningForScreenAvailabilityParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceStopListeningForScreenAvailabilityParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceStopListeningForScreenAvailabilityParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceStopListeningForScreenAvailabilityParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.availabilityUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(availabilityUrl, 8, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceStopListeningForScreenAvailabilityParams other = (PresentationServiceStopListeningForScreenAvailabilityParams) object;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.availabilityUrl, other.availabilityUrl);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(availabilityUrl);
            return result;
        }
    }



    
    static final class PresentationServiceStartSessionParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url[] presentationUrls;
    
        private PresentationServiceStartSessionParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceStartSessionParams() {
            this(0);
        }
    
        public static PresentationServiceStartSessionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceStartSessionParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceStartSessionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceStartSessionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceStartSessionParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.presentationUrls = new org.chromium.url.mojom.Url[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.presentationUrls[i1] = org.chromium.url.mojom.Url.decode(decoder2);
                        }
                    }
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (presentationUrls == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(presentationUrls.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < presentationUrls.length; ++i0) {
                    
                    encoder1.encode(presentationUrls[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceStartSessionParams other = (PresentationServiceStartSessionParams) object;
            return java.util.Arrays.deepEquals(this.presentationUrls, other.presentationUrls);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + java.util.Arrays.deepHashCode(presentationUrls);
            return result;
        }
    }



    
    static final class PresentationServiceStartSessionResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PresentationSessionInfo sessionInfo;
        public PresentationError error;
    
        private PresentationServiceStartSessionResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceStartSessionResponseParams() {
            this(0);
        }
    
        public static PresentationServiceStartSessionResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceStartSessionResponseParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceStartSessionResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceStartSessionResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceStartSessionResponseParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.sessionInfo = PresentationSessionInfo.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.error = PresentationError.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(sessionInfo, 8, true);
            
            encoder0.encode(error, 16, true);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceStartSessionResponseParams other = (PresentationServiceStartSessionResponseParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.sessionInfo, other.sessionInfo))
                return false;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.error, other.error);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sessionInfo);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(error);
            return result;
        }
    }

    static class PresentationServiceStartSessionResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final PresentationService.StartSessionResponse mCallback;

        PresentationServiceStartSessionResponseParamsForwardToCallback(PresentationService.StartSessionResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(START_SESSION_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                PresentationServiceStartSessionResponseParams response = PresentationServiceStartSessionResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.sessionInfo, response.error);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class PresentationServiceStartSessionResponseParamsProxyToResponder implements PresentationService.StartSessionResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        PresentationServiceStartSessionResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(PresentationSessionInfo sessionInfo, PresentationError error) {
            PresentationServiceStartSessionResponseParams _response = new PresentationServiceStartSessionResponseParams();

            _response.sessionInfo = sessionInfo;

            _response.error = error;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    START_SESSION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class PresentationServiceJoinSessionParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url[] presentationUrls;
        public String presentationId;
    
        private PresentationServiceJoinSessionParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceJoinSessionParams() {
            this(0);
        }
    
        public static PresentationServiceJoinSessionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceJoinSessionParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceJoinSessionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceJoinSessionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceJoinSessionParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.presentationUrls = new org.chromium.url.mojom.Url[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.presentationUrls[i1] = org.chromium.url.mojom.Url.decode(decoder2);
                        }
                    }
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.presentationId = decoder0.readString(16, true);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (presentationUrls == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(presentationUrls.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < presentationUrls.length; ++i0) {
                    
                    encoder1.encode(presentationUrls[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
            
            encoder0.encode(presentationId, 16, true);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceJoinSessionParams other = (PresentationServiceJoinSessionParams) object;
            if (!java.util.Arrays.deepEquals(this.presentationUrls, other.presentationUrls))
                return false;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.presentationId, other.presentationId);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + java.util.Arrays.deepHashCode(presentationUrls);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(presentationId);
            return result;
        }
    }



    
    static final class PresentationServiceJoinSessionResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PresentationSessionInfo sessionInfo;
        public PresentationError error;
    
        private PresentationServiceJoinSessionResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceJoinSessionResponseParams() {
            this(0);
        }
    
        public static PresentationServiceJoinSessionResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceJoinSessionResponseParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceJoinSessionResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceJoinSessionResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceJoinSessionResponseParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.sessionInfo = PresentationSessionInfo.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.error = PresentationError.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(sessionInfo, 8, true);
            
            encoder0.encode(error, 16, true);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceJoinSessionResponseParams other = (PresentationServiceJoinSessionResponseParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.sessionInfo, other.sessionInfo))
                return false;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.error, other.error);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sessionInfo);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(error);
            return result;
        }
    }

    static class PresentationServiceJoinSessionResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final PresentationService.JoinSessionResponse mCallback;

        PresentationServiceJoinSessionResponseParamsForwardToCallback(PresentationService.JoinSessionResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(JOIN_SESSION_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                PresentationServiceJoinSessionResponseParams response = PresentationServiceJoinSessionResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.sessionInfo, response.error);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class PresentationServiceJoinSessionResponseParamsProxyToResponder implements PresentationService.JoinSessionResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        PresentationServiceJoinSessionResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(PresentationSessionInfo sessionInfo, PresentationError error) {
            PresentationServiceJoinSessionResponseParams _response = new PresentationServiceJoinSessionResponseParams();

            _response.sessionInfo = sessionInfo;

            _response.error = error;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    JOIN_SESSION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class PresentationServiceSetPresentationConnectionParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PresentationSessionInfo sessionInfo;
        public PresentationConnection controllerConnectionPtr;
        public org.chromium.mojo.bindings.InterfaceRequest<PresentationConnection> receiverConnectionRequest;
    
        private PresentationServiceSetPresentationConnectionParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceSetPresentationConnectionParams() {
            this(0);
        }
    
        public static PresentationServiceSetPresentationConnectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceSetPresentationConnectionParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceSetPresentationConnectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceSetPresentationConnectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceSetPresentationConnectionParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.sessionInfo = PresentationSessionInfo.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.controllerConnectionPtr = decoder0.readServiceInterface(16, false, PresentationConnection.MANAGER);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.receiverConnectionRequest = decoder0.readInterfaceRequest(24, false);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(sessionInfo, 8, false);
            
            encoder0.encode(controllerConnectionPtr, 16, false, PresentationConnection.MANAGER);
            
            encoder0.encode(receiverConnectionRequest, 24, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceSetPresentationConnectionParams other = (PresentationServiceSetPresentationConnectionParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.sessionInfo, other.sessionInfo))
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.controllerConnectionPtr, other.controllerConnectionPtr))
                return false;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.receiverConnectionRequest, other.receiverConnectionRequest);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sessionInfo);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(controllerConnectionPtr);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(receiverConnectionRequest);
            return result;
        }
    }



    
    static final class PresentationServiceSendConnectionMessageParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PresentationSessionInfo sessionInfo;
        public ConnectionMessage messageRequest;
    
        private PresentationServiceSendConnectionMessageParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceSendConnectionMessageParams() {
            this(0);
        }
    
        public static PresentationServiceSendConnectionMessageParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceSendConnectionMessageParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceSendConnectionMessageParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceSendConnectionMessageParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceSendConnectionMessageParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.sessionInfo = PresentationSessionInfo.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.messageRequest = ConnectionMessage.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(sessionInfo, 8, false);
            
            encoder0.encode(messageRequest, 16, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceSendConnectionMessageParams other = (PresentationServiceSendConnectionMessageParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.sessionInfo, other.sessionInfo))
                return false;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.messageRequest, other.messageRequest);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sessionInfo);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(messageRequest);
            return result;
        }
    }



    
    static final class PresentationServiceSendConnectionMessageResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
    
        private PresentationServiceSendConnectionMessageResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceSendConnectionMessageResponseParams() {
            this(0);
        }
    
        public static PresentationServiceSendConnectionMessageResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceSendConnectionMessageResponseParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceSendConnectionMessageResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceSendConnectionMessageResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceSendConnectionMessageResponseParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.success = decoder0.readBoolean(8, 0);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(success, 8, 0);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceSendConnectionMessageResponseParams other = (PresentationServiceSendConnectionMessageResponseParams) object;
            return this.success == other.success;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(success);
            return result;
        }
    }

    static class PresentationServiceSendConnectionMessageResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final PresentationService.SendConnectionMessageResponse mCallback;

        PresentationServiceSendConnectionMessageResponseParamsForwardToCallback(PresentationService.SendConnectionMessageResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SEND_CONNECTION_MESSAGE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                PresentationServiceSendConnectionMessageResponseParams response = PresentationServiceSendConnectionMessageResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class PresentationServiceSendConnectionMessageResponseParamsProxyToResponder implements PresentationService.SendConnectionMessageResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        PresentationServiceSendConnectionMessageResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success) {
            PresentationServiceSendConnectionMessageResponseParams _response = new PresentationServiceSendConnectionMessageResponseParams();

            _response.success = success;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SEND_CONNECTION_MESSAGE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class PresentationServiceCloseConnectionParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url presentationUrl;
        public String presentationId;
    
        private PresentationServiceCloseConnectionParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceCloseConnectionParams() {
            this(0);
        }
    
        public static PresentationServiceCloseConnectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceCloseConnectionParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceCloseConnectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceCloseConnectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceCloseConnectionParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.presentationUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.presentationId = decoder0.readString(16, false);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(presentationUrl, 8, false);
            
            encoder0.encode(presentationId, 16, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceCloseConnectionParams other = (PresentationServiceCloseConnectionParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.presentationUrl, other.presentationUrl))
                return false;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.presentationId, other.presentationId);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(presentationUrl);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(presentationId);
            return result;
        }
    }



    
    static final class PresentationServiceTerminateParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url presentationUrl;
        public String presentationId;
    
        private PresentationServiceTerminateParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceTerminateParams() {
            this(0);
        }
    
        public static PresentationServiceTerminateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceTerminateParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceTerminateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceTerminateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceTerminateParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.presentationUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.presentationId = decoder0.readString(16, false);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(presentationUrl, 8, false);
            
            encoder0.encode(presentationId, 16, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceTerminateParams other = (PresentationServiceTerminateParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.presentationUrl, other.presentationUrl))
                return false;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.presentationId, other.presentationId);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(presentationUrl);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(presentationId);
            return result;
        }
    }



    
    static final class PresentationServiceListenForConnectionMessagesParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PresentationSessionInfo sessionInfo;
    
        private PresentationServiceListenForConnectionMessagesParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public PresentationServiceListenForConnectionMessagesParams() {
            this(0);
        }
    
        public static PresentationServiceListenForConnectionMessagesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PresentationServiceListenForConnectionMessagesParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static PresentationServiceListenForConnectionMessagesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PresentationServiceListenForConnectionMessagesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new PresentationServiceListenForConnectionMessagesParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.sessionInfo = PresentationSessionInfo.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(sessionInfo, 8, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            PresentationServiceListenForConnectionMessagesParams other = (PresentationServiceListenForConnectionMessagesParams) object;
            return org.chromium.mojo.bindings.BindingsHelper.equals(this.sessionInfo, other.sessionInfo);
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sessionInfo);
            return result;
        }
    }



}
